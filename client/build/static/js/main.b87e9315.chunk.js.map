{"version":3,"sources":["public/rcfmeets.png","Components/ProtectedRoute.js","Components/withWindowDimensions.jsx","Components/Home.js","Components/Feed.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProtectedRoute","Component","component","rest","render","props","localStorage","getItem","to","WrappedComponent","Home","handlePassword","event","setState","password","target","value","handleSubmit","preventDefault","errorPassword","state","length","localeCompare","setItem","history","push","pathname","this","isMobileSized","Container","className","class","Form","onSubmit","Group","controlId","Control","type","placeholder","onChange","Text","Button","variant","href","Image","src","rcfmeets","Card","withWindowDimensions","width","height","updateWindowDimensions","window","innerWidth","innerHeight","addEventListener","removeEventListener","windowWidth","windowHeight","Feed","App","exact","path","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b87e9315.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rcfmeets.0a98477a.png\";","import React from 'react'\nimport { Route, Redirect } from 'react-router-dom';\n// a protected route will reroute back to the root if your username is not locally stored.\nexport const ProtectedRoute = ({ component: Component, ... rest}) => {\n    return (\n        <Route\n         {...rest }\n         render = {props => {\n             if(localStorage.getItem(\"token\")) {\n                 return <Component {...props} />\n             } else {\n                 return <Redirect to= \"/\" />\n             }\n         }}\n        />\n    )\n}\n\nexport default ProtectedRoute;","import React, { Component } from \"react\";\n\nexport default function withWindowDimensions(WrappedComponent) {\n    return class extends Component {\n        state = { width: 0, height: 0 };\n\n        componentDidMount() {\n            this.updateWindowDimensions();\n            window.addEventListener(\"resize\", this.updateWindowDimensions);\n        }\n\n        componentWillUnmount() {\n            window.removeEventListener(\"resize\", this.updateWindowDimensions);\n        }\n\n        updateWindowDimensions = () => {\n            this.setState({ width: window.innerWidth, height: window.innerHeight });\n        };\n\n        render() {\n            return (\n                <WrappedComponent\n                    {...this.props}\n                    windowWidth={this.state.width}\n                    windowHeight={this.state.height}\n                    isMobileSized={this.state.width < 700}\n                />\n            );\n        }\n    };\n}","import React, {Component} from 'react'\nimport {Image, Container, Form, Button} from 'react-bootstrap'\nimport Card from 'react-bootstrap/Card'\nimport withWindowDimensions from './withWindowDimensions.jsx';\nimport rcfmeets from '../public/rcfmeets.png'\nimport '../public/style/Home.css'\n\nclass Home extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            password: '',\n            errorPassword: ''\n        }\n    }\n\n    handlePassword = (event) => {\n        this.setState({\n            password: event.target.value\n        })\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        var errorPassword = \"\";\n\n        if (this.state.password.length === 0) {\n            errorPassword = \"The password cannot be blank.\";\n            this.setState({\n                errorPassword: errorPassword\n            })\n        } else if (this.state.password.localeCompare(\"renewal2021\") != 0) {\n            errorPassword = \"Incorrect password. Please try again.\";\n            this.setState({\n                errorPassword: errorPassword\n            })\n        } else {\n            localStorage.setItem(\"token\", \"loggedIn\")\n            this.props.history.push({\n                pathname: '/feed'\n            });\n        }\n    }\n\n    render() {\n        if (this.props.isMobileSized) {\n            return (\n                <div>\n                    <Container className=\"content-container-mobile\">\n                        <div class=\"card-wrapper\">\n                            <div className=\"card-content\">\n                                <h1 class=\"title\">RCFgram</h1>\n                                <Form className=\"login-form\" onSubmit={this.handleSubmit}>\n                                    <Form.Group controlId=\"formBasicPassword\">\n                                        <Form.Control type=\"password\" placeholder=\"Password\" onChange = {this.handlePassword}/>\n                                        <Form.Text className=\"red-text\">\n                                            {this.state.errorPassword}\n                                        </Form.Text> \n                                    </Form.Group>\n                                    <Button className=\"login-button\" variant=\"primary\" type=\"submit\">\n                                        Log In\n                                    </Button>\n                                </Form>\n                            </div>\n                            <div class=\"redirect-text\">\n                                <div class=\"redirect-one\">\n                                    Don't know the password? Ask <a href=\"https://m.me/matthew24kim\" target=\"_blank\">here!</a>\n                                </div>\n                            </div>\n                        </div>\n                    </Container>\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <Container className=\"content-container\">\n                        <div class=\"image-wrapper\">\n                            <Image className=\"image\" src={rcfmeets} />\n                        </div>\n                        <div class=\"card-wrapper\">\n                            <Card className=\"login-card\">\n                                <div className=\"card-content\">\n                                    <h1 class=\"title\">RCFgram</h1>\n                                    <Form className=\"login-form\" onSubmit={this.handleSubmit}>\n                                        <Form.Group controlId=\"formBasicPassword\">\n                                            <Form.Control type=\"password\" placeholder=\"Password\" onChange = {this.handlePassword}/>\n                                            <Form.Text className=\"red-text\">\n                                                {this.state.errorPassword}\n                                            </Form.Text> \n                                        </Form.Group>\n                                        <Button className=\"login-button\" variant=\"primary\" type=\"submit\">\n                                            Log In\n                                        </Button>\n                                    </Form>\n                                </div>\n                            </Card>\n                            <Card className=\"redirect-card\">\n                                <div class=\"redirect-text\">\n                                    <div class=\"redirect-one\">\n                                        Don't know the password? Ask <a href=\"https://m.me/matthew24kim\" target=\"_blank\">here!</a>\n                                    </div>\n                                </div>\n                            </Card>\n                        </div>\n                    \n                    </Container>\n    \n                        \n                </div>\n            )\n        }\n\n\n        \n    }\n}\n\nexport default withWindowDimensions(Home);","import React, {Component} from 'react'\n\nclass Feed extends Component {\n    render() {\n        return (\n            <div>\n                <h1>welcome to rcf meets ahahahahah</h1>\n            </div>\n        )\n    }\n}\n\nexport default Feed;","import React, {Component} from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport ProtectedRoute from './Components/ProtectedRoute'\nimport Home from './Components/Home'\nimport Feed from './Components/Feed'\n\nclass App extends Component {\n\n  render () {\n    return (\n      <div>\n        <BrowserRouter> \n          <Route exact path = \"/\" component = {Home} />\n          <ProtectedRoute exact path = \"/feed\" component = {Feed} />\n        </BrowserRouter>\n      </div>\n    )\n  }\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}